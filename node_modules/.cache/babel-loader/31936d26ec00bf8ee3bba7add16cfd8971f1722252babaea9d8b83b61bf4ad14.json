{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jacks\\\\Desktop\\\\wordle-react\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Box from \"./Box\";\nimport words from \"../words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = props => {\n  _s();\n  const [letters, setLetters] = useState({});\n  const [board, setBoard] = useState([]);\n  const [changed, setChanged] = useState(false);\n  const [row, setRow] = useState(0);\n  const [col, setCol] = useState(0);\n  const [win, setWin] = useState(false);\n  const [lost, setLost] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const correct = words[Math.floor(Math.random() * words.length - 1)].toUpperCase();\n  useEffect(() => {\n    const defaultLetters = {};\n    \"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach(i => {\n      defaultLetters[i] = \"\";\n    });\n    const defaultBoard = Array.from({\n      length: 6\n    }, () => Array.from({\n      length: 5\n    }, () => [\"\", \"\"]));\n    setLetters(defaultLetters);\n    setBoard(defaultBoard);\n  }, []);\n  useEffect(() => {\n    if (win || lost) {\n      console.log(\"Game ended!\");\n    } else {\n      if (props.clicks !== 0) {\n        if (props.letter === \"DEL\") {\n          setCol(prevCol => prevCol === 0 ? 0 : prevCol - 1);\n          setBoard(prevBoard => {\n            const updatedBoard = [...prevBoard];\n            updatedBoard[row][col === 0 ? 0 : col - 1][0] = \"\";\n            return updatedBoard;\n          });\n        } else {\n          setBoard(prevBoard => {\n            const updatedBoard = [...prevBoard];\n            if (col < 5) {\n              if (props.letter !== \"ENTER\") {\n                updatedBoard[row][col][0] = props.letter;\n                setCol(prevCol => prevCol + 1);\n              } else {\n                props.error(\"Words are 5 letters long!\");\n                setTimeout(() => {\n                  props.error(\"\");\n                }, 1000);\n              }\n            } else {\n              if (props.letter === \"ENTER\") {\n                let correctLetters = 0;\n                let word = \"\";\n                for (let i = 0; i < 5; i++) {\n                  word += updatedBoard[row][i][0];\n                }\n                if (words.includes(word.toLowerCase())) {\n                  for (let i = 0; i < 5; i++) {\n                    if (correct[i] === updatedBoard[row][i][0]) {\n                      updatedBoard[row][i][1] = \"C\";\n                      correctLetters++;\n                    } else if (correct.includes(updatedBoard[row][i][0])) updatedBoard[row][i][1] = \"E\";else updatedBoard[row][i][1] = \"N\";\n                  }\n                  setRow(prevRow => prevRow + 1);\n                  if (row === 5) {\n                    setLost(true);\n                    setTimeout(() => {\n                      setMessage(`It was ${correct}`);\n                    }, 750);\n                  }\n                  setCol(0);\n                  setLetters(prev => {\n                    const updatedLetters = {\n                      ...prev\n                    };\n                    updatedLetters[updatedBoard[row][i][0]] = updatedBoard[row][i][1];\n                    return updatedLetters;\n                  });\n                  setBoard(updatedBoard);\n                  setChanged(prevState => !prevState);\n                  if (correctLetters === 5) {\n                    setWin(true);\n                    setTimeout(() => {\n                      setMessage(\"You WIN\");\n                    }, 750);\n                  }\n                } else {\n                  props.error(\"Word not in dictionary\");\n                  setTimeout(() => {\n                    props.error(\"\");\n                  }, 1500);\n                }\n              }\n            }\n            return updatedBoard;\n          });\n        }\n      }\n    }\n  }, [props.clicks]);\n  useEffect(() => {\n    props.letters(letters);\n  }, [changed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid items-center justify-center w-full px-2 py-5 gap-y-1\",\n    children: [board.map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex w-full gap-1\",\n        children: row.map((value, key) => /*#__PURE__*/_jsxDEV(Box, {\n          value: value[0],\n          state: value[1],\n          pos: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid h-8 font-bold place-items-center dark:text-white\",\n      children: lost || win ? message : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"0iqOIZeZd9mPsLc7cWgBKo2IKHA=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","Box","words","jsxDEV","_jsxDEV","Board","props","_s","letters","setLetters","board","setBoard","changed","setChanged","row","setRow","col","setCol","win","setWin","lost","setLost","message","setMessage","correct","Math","floor","random","length","toUpperCase","defaultLetters","split","forEach","i","defaultBoard","Array","from","console","log","clicks","letter","prevCol","prevBoard","updatedBoard","error","setTimeout","correctLetters","word","includes","toLowerCase","prevRow","prev","updatedLetters","prevState","className","children","map","index","value","key","state","pos","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jacks/Desktop/wordle-react/src/components/Board.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Box from \"./Box\";\nimport words from \"../words\";\n\nconst Board = (props) => {\n  const [letters, setLetters] = useState({});\n  const [board, setBoard] = useState([]);\n  const [changed, setChanged] = useState(false);\n  const [row, setRow] = useState(0);\n  const [col, setCol] = useState(0);\n  const [win, setWin] = useState(false);\n  const [lost, setLost] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const correct = words[Math.floor(Math.random() * words.length - 1)].toUpperCase();\n\n  useEffect(() => {\n    const defaultLetters = {};\n    \"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach((i) => {\n      defaultLetters[i] = \"\";\n    });\n\n    const defaultBoard = Array.from({ length: 6 }, () => Array.from({ length: 5 }, () => [\"\", \"\"]));\n\n    setLetters(defaultLetters);\n    setBoard(defaultBoard);\n  }, []);\n\n  useEffect(() => {\n    if (win || lost) {\n      console.log(\"Game ended!\");\n    } else {\n      if (props.clicks !== 0) {\n        if (props.letter === \"DEL\") {\n          setCol((prevCol) => (prevCol === 0 ? 0 : prevCol - 1));\n          setBoard((prevBoard) => {\n            const updatedBoard = [...prevBoard];\n            updatedBoard[row][col === 0 ? 0 : col - 1][0] = \"\";\n            return updatedBoard;\n          });\n        } else {\n          setBoard((prevBoard) => {\n            const updatedBoard = [...prevBoard];\n            if (col < 5) {\n              if (props.letter !== \"ENTER\") {\n                updatedBoard[row][col][0] = props.letter;\n                setCol((prevCol) => prevCol + 1);\n              } else {\n                props.error(\"Words are 5 letters long!\");\n                setTimeout(() => {\n                  props.error(\"\");\n                }, 1000);\n              }\n            } else {\n              if (props.letter === \"ENTER\") {\n                let correctLetters = 0;\n                let word = \"\";\n                for (let i = 0; i < 5; i++) {\n                  word += updatedBoard[row][i][0];\n                }\n                if (words.includes(word.toLowerCase())) {\n                  for (let i = 0; i < 5; i++) {\n                    if (correct[i] === updatedBoard[row][i][0]) {\n                      updatedBoard[row][i][1] = \"C\";\n                      correctLetters++;\n                    } else if (correct.includes(updatedBoard[row][i][0])) updatedBoard[row][i][1] = \"E\";\n                    else updatedBoard[row][i][1] = \"N\";\n                  }\n                  setRow((prevRow) => prevRow + 1);\n                  if (row === 5) {\n                    setLost(true);\n                    setTimeout(() => {\n                      setMessage(`It was ${correct}`);\n                    }, 750);\n                  }\n                  setCol(0);\n                  setLetters((prev) => {\n                    const updatedLetters = { ...prev };\n                    updatedLetters[updatedBoard[row][i][0]] = updatedBoard[row][i][1];\n                    return updatedLetters;\n                  });\n                  setBoard(updatedBoard);\n                  setChanged((prevState) => !prevState);\n                  if (correctLetters === 5) {\n                    setWin(true);\n                    setTimeout(() => {\n                      setMessage(\"You WIN\");\n                    }, 750);\n                  }\n                } else {\n                  props.error(\"Word not in dictionary\");\n                  setTimeout(() => {\n                    props.error(\"\");\n                  }, 1500);\n                }\n              }\n            }\n            return updatedBoard;\n          });\n        }\n      }\n    }\n  }, [props.clicks]);\n\n  useEffect(() => {\n    props.letters(letters);\n  }, [changed]);\n\n  return (\n    <div className=\"grid items-center justify-center w-full px-2 py-5 gap-y-1\">\n      {board.map((row, index) => {\n        return (\n          <div key={index} className=\"flex w-full gap-1\">\n            {row.map((value, key) => (\n              <Box key={key} value={value[0]} state={value[1]} pos={key} />\n            ))}\n          </div>\n        );\n      })}\n      <div className=\"grid h-8 font-bold place-items-center dark:text-white\">{lost || win ? message : \"\"}</div>\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}