{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jacks\\\\Desktop\\\\wordle-react\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Box from \"./Box\";\nimport words from \"../words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst correct = words[Math.floor(Math.random() * words.length - 1)].toUpperCase();\nlet defaulBoard = Array.from({\n  length: 6\n}, () => Array(5).fill([\"\", \"\"]));\nlet defaultLetters = [];\n\"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach(i => {\n  defaultLetters[i] = \"\";\n});\n\n// for (let i = 0; i < 6; i++) {\n//   defaulBoard.push([]);\n//   for (let j = 0; j < 5; j++) {\n//     defaulBoard[i].push([\"\", \"\"]);\n//   }\n// }\n\nconst Board = props => {\n  _s();\n  const [letters, setLetters] = useState(defaultLetters);\n  const [board, setBoard] = useState(defaulBoard);\n  const [changed, setChanged] = useState(false);\n  const [row, setRow] = useState(0);\n  const [col, setCol] = useState(0);\n  const [win, setWin] = useState(false);\n  const [lost, setLost] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    if (win || lost) {\n      console.log(\"Game ended!\");\n    } else {\n      if (props.clicks !== 0) {\n        if (props.letter === \"DEL\") {\n          setCol(col === 0 ? 0 : col - 1);\n          setBoard(prevBoard => {\n            prevBoard[row][col === 0 ? 0 : col - 1][0] = \"\";\n            return prevBoard;\n          });\n        } else {\n          setBoard(prevBoard => {\n            if (col < 5) {\n              if (props.letter !== \"ENTER\") {\n                prevBoard[row][col][0] = props.letter;\n                setCol(col + 1);\n              } else {\n                props.error(\"Words are 5 letters long!\");\n                setTimeout(() => {\n                  props.error(\"\");\n                }, 1000);\n              }\n            } else {\n              if (props.letter === \"ENTER\") {\n                let correctLetters = 0;\n                let word = \"\";\n                for (let i = 0; i < 5; i++) {\n                  word += prevBoard[row][i][0];\n                }\n                if (words.includes(word.toLowerCase())) {\n                  for (let i = 0; i < 5; i++) {\n                    if (correct[i] === prevBoard[row][i][0]) {\n                      prevBoard[row][i][1] = \"C\";\n                      correctLetters++;\n                    } else if (correct.includes(prevBoard[row][i][0])) prevBoard[row][i][1] = \"E\";else prevBoard[row][i][1] = \"N\";\n                    setRow(row + 1);\n                    if (row === 5) {\n                      setLost(true);\n                      setTimeout(() => {\n                        setMessage(`It was ${correct}`);\n                      }, 750);\n                    }\n                    setCol(0);\n                    setLetters(prev => {\n                      prev[board[row][i][0]] = board[row][i][1];\n                      return prev;\n                    });\n                  }\n                  setChanged(!changed);\n                  if (correctLetters === 5) {\n                    setWin(true);\n                    setTimeout(() => {\n                      setMessage(\"You WIN\");\n                    }, 750);\n                  }\n                  return prevBoard;\n                } else {\n                  props.error(\"Word not in dictionary\");\n                  setTimeout(() => {\n                    props.error(\"\");\n                  }, 1500);\n                }\n              }\n            }\n            return prevBoard;\n          });\n        }\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.clicks]);\n  useEffect(() => {\n    props.letters(letters); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [changed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid items-center justify-center w-full px-2 py-5 gap-y-1\",\n    children: [board.map((row, key) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex w-full gap-1\",\n        children: row.map((value, key) => /*#__PURE__*/_jsxDEV(Box, {\n          value: value[0],\n          state: value[1],\n          pos: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid h-8 font-bold place-items-center dark:text-white\",\n      children: lost || win ? message : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"aTSidK8g/HnSkFvZYkyKNqFIeZw=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","Box","words","jsxDEV","_jsxDEV","correct","Math","floor","random","length","toUpperCase","defaulBoard","Array","from","fill","defaultLetters","split","forEach","i","Board","props","_s","letters","setLetters","board","setBoard","changed","setChanged","row","setRow","col","setCol","win","setWin","lost","setLost","message","setMessage","console","log","clicks","letter","prevBoard","error","setTimeout","correctLetters","word","includes","toLowerCase","prev","className","children","map","key","value","state","pos","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jacks/Desktop/wordle-react/src/components/Board.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Box from \"./Box\";\nimport words from \"../words\";\n\nconst correct = words[Math.floor(Math.random() * words.length - 1)].toUpperCase();\nlet defaulBoard = Array.from({ length: 6 }, () => Array(5).fill([\"\", \"\"]));\nlet defaultLetters = [];\n\n\"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach((i) => {\n  defaultLetters[i] = \"\";\n});\n\n// for (let i = 0; i < 6; i++) {\n//   defaulBoard.push([]);\n//   for (let j = 0; j < 5; j++) {\n//     defaulBoard[i].push([\"\", \"\"]);\n//   }\n// }\n\nconst Board = (props) => {\n  const [letters, setLetters] = useState(defaultLetters);\n  const [board, setBoard] = useState(defaulBoard);\n  const [changed, setChanged] = useState(false);\n  const [row, setRow] = useState(0);\n  const [col, setCol] = useState(0);\n  const [win, setWin] = useState(false);\n  const [lost, setLost] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (win || lost) {\n      console.log(\"Game ended!\");\n    } else {\n      if (props.clicks !== 0) {\n        if (props.letter === \"DEL\") {\n          setCol(col === 0 ? 0 : col - 1);\n          setBoard((prevBoard) => {\n            prevBoard[row][col === 0 ? 0 : col - 1][0] = \"\";\n            return prevBoard;\n          });\n        } else {\n          setBoard((prevBoard) => {\n            if (col < 5) {\n              if (props.letter !== \"ENTER\") {\n                prevBoard[row][col][0] = props.letter;\n                setCol(col + 1);\n              } else {\n                props.error(\"Words are 5 letters long!\");\n                setTimeout(() => {\n                  props.error(\"\");\n                }, 1000);\n              }\n            } else {\n              if (props.letter === \"ENTER\") {\n                let correctLetters = 0;\n                let word = \"\";\n                for (let i = 0; i < 5; i++) {\n                  word += prevBoard[row][i][0];\n                }\n                if (words.includes(word.toLowerCase())) {\n                  for (let i = 0; i < 5; i++) {\n                    if (correct[i] === prevBoard[row][i][0]) {\n                      prevBoard[row][i][1] = \"C\";\n                      correctLetters++;\n                    } else if (correct.includes(prevBoard[row][i][0])) prevBoard[row][i][1] = \"E\";\n                    else prevBoard[row][i][1] = \"N\";\n                    setRow(row + 1);\n                    if (row === 5) {\n                      setLost(true);\n                      setTimeout(() => {\n                        setMessage(`It was ${correct}`);\n                      }, 750);\n                    }\n\n                    setCol(0);\n                    setLetters((prev) => {\n                      prev[board[row][i][0]] = board[row][i][1];\n                      return prev;\n                    });\n                  }\n                  setChanged(!changed);\n\n                  if (correctLetters === 5) {\n                    setWin(true);\n                    setTimeout(() => {\n                      setMessage(\"You WIN\");\n                    }, 750);\n                  }\n                  return prevBoard;\n                } else {\n                  props.error(\"Word not in dictionary\");\n                  setTimeout(() => {\n                    props.error(\"\");\n                  }, 1500);\n                }\n              }\n            }\n            return prevBoard;\n          });\n        }\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.clicks]);\n\n  useEffect(() => {\n    props.letters(letters); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [changed]);\n\n  return (\n    <div className=\"grid items-center justify-center w-full px-2 py-5 gap-y-1\">\n      {board.map((row, key) => {\n        return (\n          <div key={key} className=\"flex w-full gap-1\">\n            {row.map((value, key) => (\n              <Box key={key} value={value[0]} state={value[1]} pos={key} />\n            ))}\n          </div>\n        );\n      })}\n      <div className=\"grid h-8 font-bold place-items-center dark:text-white\">{lost || win ? message : \"\"}</div>\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}